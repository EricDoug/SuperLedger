在几个Peer节点机器上建立如下文件夹
mkdir -p /hyperledger/data/
rm -rf /hyperledger/data/shared
rm -rf /hyperledger/data/statedata

四个节点机器：
192.168.18.134 第一个节点 ，Org1Peer1,同时运行Orderer服务
192.168.18.135 第二个节点，Org1Peer2
192.168.18.136
192.168.18.137


生成证书 (第一个节点操作）
docker rm -f gencrypt
docker run -it --name gencrypt -e FABRIC_CFG_PATH=/shared \
-v /hyperledger/data/shared/:/shared -v /hyperledger/data/config/:/config \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'cryptogen generate --config /config/crypto-config.yaml && cp -r crypto-config /shared/; \
cp /config/configtx.yaml /shared/configtx.yaml \
&& for file in $(find /shared/ -iname *_sk); do dir=$(dirname $file); mv ${dir}/*_sk ${dir}/key.pem; \
done && find /shared -type d | xargs chmod a+rx && find /shared -type f | xargs chmod a+r'

生成创世块 (第一个节点操作）
docker rm -f genesis
docker run -it --name genesis -e FABRIC_CFG_PATH=/shared \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'cd /shared/; configtxgen -profile TwoOrgsOrdererGenesis -outputBlock orderer.block \
&& find /shared -type d | xargs chmod a+rx && find /shared -type f | xargs chmod a+r '

复制共享文件到其他节点上  (第一个节点操作）
scp -r /hyperledger/data/shared/  root@192.168.18.135:/hyperledger/data/
scp -r /hyperledger/data/shared/  root@192.168.18.136:/hyperledger/data/
scp -r /hyperledger/data/shared/  root@192.168.18.137:/hyperledger/data/


创建orderer节点  (第一个节点操作）

docker rm -f orderer1
docker run --name orderer1 -it --net=host -e ORDERER_CFG_PATH=/shared/ -e ORDERER_GENERAL_LEDGERTYPE=file \
-e ORDERER_GENERAL_LISTENPORT=31010 -e ORDERER_GENERAL_LISTENADDRESS=0.0.0.0 \
-e ORDERER_GENERAL_LOCALMSPDIR=/shared/crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp \
-e ORDERER_FILELEDGER_LOCATION=/mnt/ledger/orderer1 -e ORDERER_GENERAL_BATCHTIMEOUT=1s \
-e ORDERER_GENERAL_ORDERERTYPE=solo -e ORDERER_GENERAL_LOGLEVEL=debug \
-e ORDERER_GENERAL_LOCALMSPID=OrdererMSP -e ORDERER_GENERAL_GENESISFILE=/shared/orderer.block \
-e ORDERER_GENERAL_GENESISMETHOD=file -e ORDERER_GENERAL_GENESISPROFILE=initial \
-e ORDERER_GENERAL_TLS_ENABLED=false \
-v /hyperledger/data/shared:/shared -v /hyperledger/data/statedata/orderer:/mnt \
hyperledger/fabric-orderer:x86_64-1.0.2  sh -c 'orderer'

创建第一个Peer 192.168.18.134机器 ，peer0.org1.example.com ，Org1MSP

docker rm -f  org1peer1
docker run --name org1peer1 -it --net=host  \
-v /hyperledger/data/statedata/org1peer1:/var/hyperledger \
-e ORDERER_URL=192.168.18.134:31010 -e CORE_PEER_LOCALMSPID=Org1MSP \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/ \
-e CORE_PEER_GOSSIP_ORGLEADER=true -e CORE_PEER_GOSSIP_SKIPHANDSHAKE=true \
-e CORE_PEER_LISTENADDRESS=0.0.0.0:5010  -e CORE_PEER_EVENTS_ADDRESS=0.0.0.0:5011 \
-e CORE_PEER_ADDRESS=192.168.18.134:5010 -e CORE_PEER_GOSSIP_BOOTSTRAP=192.168.18.134:5010 \
-e CORE_PEER_NETWORKID=nid1 -e CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock \
-e CORE_PEER_COMMITTER_ENABLED=true -e CORE_PEER_TLS_ENABLED=false \
-e CORE_PEER_ADDRESSAUTODETECT=true -e CORE_PEER_PROFILE_ENABLED=true \
-e CORE_LEDGER_STATE_STATEDATABASE=goleveldb -e FABRIC_CFG_PATH=/etc/hyperledger/fabric/ \
-e CORE_PEER_DISCOVERY_PERIOD=60s -e CORE_LOGGING_LEVE=debug \
-e CORE_LOGGING_GOSSIP=debug \
-v /hyperledger/data/shared:/shared -v /var/run/docker.sock:/host/var/run/docker.sock \
hyperledger/fabric-peer:x86_64-1.0.2  sh -c 'peer node start --peer-defaultchain=false'


创建第二个Peer 192.168.18.135机器 ，peer1.org1.example.com，Org1MSP
docker rm -f  org1peer2
docker run --name org1peer2 -it --net=host  \
-v /hyperledger/data/statedata/org1peer2:/var/hyperledger \
-e ORDERER_URL=192.168.18.134:31010 -e CORE_PEER_LOCALMSPID=Org1MSP \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/msp/ \
-e CORE_PEER_GOSSIP_ORGLEADER=true -e CORE_PEER_GOSSIP_SKIPHANDSHAKE=true \
-e CORE_PEER_LISTENADDRESS=0.0.0.0:5010  -e CORE_PEER_EVENTS_ADDRESS=0.0.0.0:5011 \
-e CORE_PEER_ADDRESS=192.168.18.135:5010 -e CORE_PEER_GOSSIP_BOOTSTRAP=192.168.18.135:5010 \
-e CORE_PEER_NETWORKID=nid1 -e CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock \
-e CORE_PEER_COMMITTER_ENABLED=true -e CORE_PEER_TLS_ENABLED=false \
-e CORE_PEER_ADDRESSAUTODETECT=true -e CORE_PEER_PROFILE_ENABLED=true \
-e CORE_LEDGER_STATE_STATEDATABASE=goleveldb -e FABRIC_CFG_PATH=/etc/hyperledger/fabric/ \
-e CORE_PEER_DISCOVERY_PERIOD=60s -e CORE_LOGGING_LEVE=debug \
-e CORE_LOGGING_GOSSIP=debug \
-v /hyperledger/data/shared:/shared -v /var/run/docker.sock:/host/var/run/docker.sock \
hyperledger/fabric-peer:x86_64-1.0.2  sh -c 'peer node start --peer-defaultchain=false'


创建第三个Peer （Org2的第一个），192.168.18.136机器 ，peer0.org2.example.com,Org2MSP
docker rm -f  org2peer1
docker run --name org2peer1 -it --net=host  \
-v /hyperledger/data/statedata/org2peer1:/var/hyperledger \
-e ORDERER_URL=192.168.18.134:31010 -e CORE_PEER_LOCALMSPID=Org2MSP \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/msp/ \
-e CORE_PEER_GOSSIP_ORGLEADER=true -e CORE_PEER_GOSSIP_SKIPHANDSHAKE=true \
-e CORE_PEER_LISTENADDRESS=0.0.0.0:5010  -e CORE_PEER_EVENTS_ADDRESS=0.0.0.0:5011 \
-e CORE_PEER_ADDRESS=192.168.18.136:5010 -e CORE_PEER_GOSSIP_BOOTSTRAP=192.168.18.136:5010 \
-e CORE_PEER_NETWORKID=nid1 -e CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock \
-e CORE_PEER_COMMITTER_ENABLED=true -e CORE_PEER_TLS_ENABLED=false \
-e CORE_PEER_ADDRESSAUTODETECT=true -e CORE_PEER_PROFILE_ENABLED=true \
-e CORE_LEDGER_STATE_STATEDATABASE=goleveldb -e FABRIC_CFG_PATH=/etc/hyperledger/fabric/ \
-e CORE_PEER_DISCOVERY_PERIOD=60s -e CORE_LOGGING_LEVE=debug \
-e CORE_LOGGING_GOSSIP=debug \
-v /hyperledger/data/shared:/shared -v /var/run/docker.sock:/host/var/run/docker.sock \
hyperledger/fabric-peer:x86_64-1.0.2  sh -c 'peer node start --peer-defaultchain=false'


创建第四个Peer （Org2的第2个），192.168.18.137机器 ，peer1.org2.example.com,Org2MSP
docker rm -f  org2peer2
docker run --name org2peer2 -it --net=host  \
-v /hyperledger/data/statedata/org2peer2:/var/hyperledger \
-e ORDERER_URL=192.168.18.134:31010 -e CORE_PEER_LOCALMSPID=Org2MSP \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/msp/ \
-e CORE_PEER_GOSSIP_ORGLEADER=true -e CORE_PEER_GOSSIP_SKIPHANDSHAKE=true \
-e CORE_PEER_LISTENADDRESS=0.0.0.0:5010  -e CORE_PEER_EVENTS_ADDRESS=0.0.0.0:5011 \
-e CORE_PEER_ADDRESS=192.168.18.137:5010 -e CORE_PEER_GOSSIP_BOOTSTRAP=192.168.18.137:5010 \
-e CORE_PEER_NETWORKID=nid1 -e CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock \
-e CORE_PEER_COMMITTER_ENABLED=true -e CORE_PEER_TLS_ENABLED=false \
-e CORE_PEER_ADDRESSAUTODETECT=true -e CORE_PEER_PROFILE_ENABLED=true \
-e CORE_LEDGER_STATE_STATEDATABASE=goleveldb -e FABRIC_CFG_PATH=/etc/hyperledger/fabric/ \
-e CORE_PEER_DISCOVERY_PERIOD=60s -e CORE_LOGGING_LEVE=debug \
-e CORE_LOGGING_GOSSIP=debug \
-v /hyperledger/data/shared:/shared -v /var/run/docker.sock:/host/var/run/docker.sock \
hyperledger/fabric-peer:x86_64-1.0.2  sh -c 'peer node start --peer-defaultchain=false'

创建Channel
docker rm createchannel
docker run -it --name createchannel -e FABRIC_CFG_PATH=/shared \
-e CHANNEL_NAME=channel1 \
-e ORDERER_URL=192.168.18.134:31010 \
-e CORE_PEER_LOCALMSPID=Org1MSP \
-e CORE_PEER_NETWORKID=nid1 \
-e CORE_PEER_ADDRESSAUTODETECT=false \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp/ \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'cd /shared && pwd && ls && configtxgen -profile TwoOrgsChannel \
-outputCreateChannelTx ${CHANNEL_NAME}.tx -channelID ${CHANNEL_NAME} &&\
configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate Org1MSPanchors.tx \
-channelID ${CHANNEL_NAME} -asOrg Org1MSP &&\
configtxgen -profile TwoOrgsChannel -outputAnchorPeersUpdate Org2MSPanchors.tx \
-channelID ${CHANNEL_NAME} -asOrg Org2MSP &&\
export FABRIC_CFG_PATH=/etc/hyperledger/fabric && peer channel create -o ${ORDERER_URL} -c ${CHANNEL_NAME} \
-f /shared/${CHANNEL_NAME}.tx'


Join Channel ，每个Peer一次。。

第一个Peer加入，192.168.18.134:5010，

docker rm joinchannel
docker run -it --name joinchannel \
-e CHANNEL_NAME=channel1 \
-e ORDERER_URL=192.168.18.134:31010 \
-e CORE_PEER_LOCALMSPID=Org1MSP \
-e CORE_PEER_NETWORKID=nid1 \
-e CORE_PEER_ADDRESS=192.168.18.134:5010 \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp \
-e FABRIC_CFG_PATH=/etc/hyperledger/fabric \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} &&\
peer channel join -b ${CHANNEL_NAME}_newest.block'


#第二个peer加入，192.168.18.135:5010，
docker rm joinchannel
docker run -it --name joinchannel \
-e CHANNEL_NAME=channel1 \
-e ORDERER_URL=192.168.18.134:31010 \
-e CORE_PEER_LOCALMSPID=Org1MSP \
-e CORE_PEER_NETWORKID=nid1 \
-e CORE_PEER_ADDRESS=192.168.18.135:5010 \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp \
-e FABRIC_CFG_PATH=/etc/hyperledger/fabric \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} &&\
peer channel join -b ${CHANNEL_NAME}_newest.block'



#第三个peer加入，192.168.18.136:5010 （org2）
docker rm joinchannel
docker run -it --name joinchannel \
-e CHANNEL_NAME=channel1 \
-e ORDERER_URL=192.168.18.134:31010 \
-e CORE_PEER_LOCALMSPID=Org2MSP \
-e CORE_PEER_NETWORKID=nid1 \
-e CORE_PEER_ADDRESS=192.168.18.136:5010 \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp \
-e FABRIC_CFG_PATH=/etc/hyperledger/fabric \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} &&\
peer channel join -b ${CHANNEL_NAME}_newest.block'

#第四个peer加入，192.168.18.137:5010 （org2）
docker rm joinchannel
docker run -it --name joinchannel \
-e CHANNEL_NAME=channel1 \
-e ORDERER_URL=192.168.18.134:31010 \
-e CORE_PEER_LOCALMSPID=Org2MSP \
-e CORE_PEER_NETWORKID=nid1 \
-e CORE_PEER_ADDRESS=192.168.18.137:5010 \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp \
-e FABRIC_CFG_PATH=/etc/hyperledger/fabric \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'peer channel fetch newest -o ${ORDERER_URL} -c ${CHANNEL_NAME} &&\
peer channel join -b ${CHANNEL_NAME}_newest.block'

#update anchor for org1
docker rm updateanchor
docker run -it --name updateanchor \
-e CHANNEL_NAME=channel1 \
-e ORDERER_URL=192.168.18.134:31010 \
-e CORE_PEER_LOCALMSPID=Org1MSP \
-e CORE_PEER_NETWORKID=nid1 \
-e CORE_PEER_ADDRESS=192.168.18.134:5010 \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp \
-e FABRIC_CFG_PATH=/etc/hyperledger/fabric \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'peer channel update -o ${ORDERER_URL} -c ${CHANNEL_NAME} \
-f /shared/${CORE_PEER_LOCALMSPID}anchors.tx'


#update anchor for org2
docker rm updateanchor
docker run -it --name updateanchor \
-e CHANNEL_NAME=channel1 \
-e ORDERER_URL=192.168.18.134:31010 \
-e CORE_PEER_LOCALMSPID=Org2MSP \
-e CORE_PEER_NETWORKID=nid1 \
-e CORE_PEER_ADDRESS=192.168.18.136:5010 \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp \
-e FABRIC_CFG_PATH=/etc/hyperledger/fabric \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'peer channel update -o ${ORDERER_URL} -c ${CHANNEL_NAME} \
-f /shared/${CORE_PEER_LOCALMSPID}anchors.tx'

#安装chaincode,可以在多个节点安装
下载github的fabric代码所在位置为 /root/fabric
docker rm installchaincode
docker run -it --name installchaincode \
-v /root/fabric:/opt/gopath/src/github.com/hyperledger/fabric \
-e CHAINCODE_NAME=example02 \
-e CHAINCODE_VERSION=v1 \
-e ORDERER_URL=192.168.18.134:31010 \
-e CORE_PEER_LOCALMSPID=Org1MSP \
-e CORE_PEER_NETWORKID=nid1 \
-e CORE_PEER_ADDRESS=192.168.18.134:5010 \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp \
-e FABRIC_CFG_PATH=/etc/hyperledger/fabric \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 \
sh -c 'peer chaincode install -n ${CHAINCODE_NAME} \
-v ${CHAINCODE_VERSION} -p github.com/hyperledger/fabric/examples/chaincode/go/chaincode_example02/'

#初始化chaincode 以及调用测试
docker rm -f myclient
docker run -it --name myclient \
-e ORDERER_URL=192.168.18.134:31010 \
-e CORE_PEER_LOCALMSPID=Org1MSP \
-e CORE_PEER_NETWORKID=nid1 \
-e CORE_PEER_ADDRESS=192.168.18.134:5010 \
-e CORE_PEER_MSPCONFIGPATH=/shared/crypto-config/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp \
-e FABRIC_CFG_PATH=/etc/hyperledger/fabric \
-v /hyperledger/data/shared/:/shared \
hyperledger/fabric-tools:x86_64-1.0.2 bash

进入整容后执行下面命令初始化chaincode
peer chaincode instantiate  -C channel1 -n example02 -v v1 -c '{"Args":["init","a","100","b","200"]}'
调用查询
peer chaincode query -C channel1  -n example02 -v v1 -c '{"Args":["query","a"]}'


